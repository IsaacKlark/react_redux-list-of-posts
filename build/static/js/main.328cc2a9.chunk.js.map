{"version":3,"sources":["store/posts.js","store/isLoaded.js","store/loading.js","store/post.js","Comment.js","Post.js","PostList.js","api/GetDataFromServer.js","Main.js","App.js","store/index.js","index.js"],"names":["postsReducer","posts","arguments","length","undefined","action","type","isLoadedReducer","isLoaded","loadingReducer","loading","setPost","newpost","post","postReducer","removePost","connect","state","_ref","comment","react_default","a","createElement","className","name","email","body","onClick","map","post","postId","id","comments","filter","newComments","ownpost","Fragment","title","user","address","street","suite","city","zipcode","geo","lat","lng","src_Comment","key","PostList","src_Post","getDataFromServer","URL","fetch","then","dataList","json","setStateToStore","setPosts","newSetData","setIsLoaded","newSetIsLoaded","setIsLoading","newSetLoading","_useState","useState","_useState2","Object","slicedToArray","textInput","inputText","f","delay","timer","_len","args","Array","_key","clearTimeout","setTimeout","apply","debounce","_ref2","_ref3","allUsers","allComments","allPosts","unitedPost","regenerator_default","async","_context","prev","next","awrap","Promise","all","sent","objectSpread2","find","userId","commentId","stop","filteredPost","includes","JSON","stringify","_unused","placeholder","onChange","event","target","value","src_PostList","App","src_Main","rootReducer","combineReducers","store","createStore","ReactDOM","render","es","index","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.328cc2a9.chunk.js","sourcesContent":["export const setPosts = newSetData => ({\n  type: 'CHANGE_POSTS',\n  posts: newSetData,\n});\n\nconst postsReducer = (posts = [], action) => {\n  switch(action.type) {\n    case 'CHANGE_POSTS':\n      return  action.posts;\n\n    default:\n      return posts;\n  }\n};\n\nexport default postsReducer;\n","export const setIsLoaded = newSetIsLoaded => ({\n  type: 'CHANGE_IS_LOADED',\n  isLoaded: newSetIsLoaded,\n});\n\nconst isLoadedReducer = (isLoaded = false, action) => {\n  switch(action.type) {\n    case 'CHANGE_IS_LOADED':\n      return  action.isLoaded;\n\n    default:\n      return isLoaded;\n  }\n};\n\nexport default isLoadedReducer;\n","export const setIsLoading = newSetLoading => ({\n  type: 'CHANGE_LOADING',\n  loading: newSetLoading,\n});\n\nconst loadingReducer = (loading = false, action) => {\n  switch(action.type) {\n    case 'CHANGE_LOADING':\n      return  action.loading;\n\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","export const setPost = newpost => ({\n  type: 'CHANGE_ORIGINAL_POST',\n  post: newpost,\n});\n\nconst postReducer = (post = [], action) => {\n  switch(action.type) {\n    case 'CHANGE_ORIGINAL_POST':\n      return  action.post;\n\n    default:\n      return post;\n  }\n};\n\nexport default postReducer;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as post from './store/post';\n\nconst Comment = ({ comment, post, setPost }) => {\n  const removeComment = () => {\n    setPost(post.map(post => {\n      if (comment.postId === post.id) {\n        post.comments = post.comments.filter(newComments => {\n          return newComments.id !== comment.id;\n        });\n      }\n      return post;\n    }));\n  }\n  return (\n  <div>\n    <h3 className=\"headers\">\n      {comment.name}\n    </h3>\n    <p>\n      {comment.email}\n    </p>\n    <p>\n      {comment.body}\n    </p>\n    <button type=\"button\" onClick={removeComment}>\n      Remove\n    </button>\n  </div>\n)};\n\nconst getPosts = (state) => ({\n  post: state.post,\n});\n\nconst removePost = {\n  setPost: post.setPost,\n}\n\nComment.propTypes = {\n  comment: PropTypes.objectOf(PropTypes.any).isRequired,\n  post: PropTypes.arrayOf(PropTypes.any).isRequired,\n  setPost: PropTypes.func.isRequired,\n};\n\nexport default connect(getPosts, removePost)(Comment);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport Comment from './Comment';\nimport {connect} from 'react-redux';\nimport * as post from './store/post';\n\n\nconst Post = ({ ownpost, post, setPost }) => {\n  const removePost = () => {\n    setPost(post.filter(post => post.id !== ownpost.id));\n  }\n\n  return (\n    <>\n      <button type=\"button\" className=\"remove_post\" onClick={removePost}>\n        Remove\n      </button>\n      <section className=\"post\">\n        <h1 className=\"post__title\">\n          {ownpost.title}\n        </h1>\n        <p className=\"post__text\">\n          {ownpost.body}\n        </p>\n      </section>\n      <section className=\"userSection\">\n        {ownpost.user.name}\n        <br />\n        {ownpost.user.email}\n        <br />\n        {ownpost.user.address.street}\n        {ownpost.user.address.suite}\n        {ownpost.user.address.city}\n        {ownpost.user.address.zipcode}\n        {ownpost.user.address.geo.lat}\n        {ownpost.user.address.geo.lng}\n      </section>\n      <section className=\"commentSection\">\n        {\n          ownpost.comments.map(comment => (\n            <Comment key={comment.id} comment={comment} />))\n        }\n      </section>\n    </>\n  )};\n\nconst getPosts = (state) => ({\n  post: state.post,\n});\n\nconst removePost = {\n  setPost: post.setPost,\n}\n\nPost.propTypes = {\n  ownpost: PropTypes.objectOf(PropTypes.any).isRequired,\n  post: PropTypes.arrayOf(PropTypes.any).isRequired,\n  setPost: PropTypes.func.isRequired,\n};\n\nexport default connect(getPosts, removePost)(Post);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Post from './Post';\n\nconst PostList = ({ posts }) => (\n  <section className=\"post-list\">\n    { posts.map(post => (\n      <div key={post.id} className=\"allPost\">\n        <Post ownpost={post} />\n      </div>\n    ))}\n  </section>\n);\n\nPostList.propTypes = { posts: PropTypes.arrayOf(PropTypes.any).isRequired };\n\nexport default PostList;\n","const getDataFromServer = URL => fetch(URL).then(dataList => dataList.json());\n\nexport default getDataFromServer;\n","import PropTypes from 'prop-types';\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport  * as posts from './store/posts';\nimport  * as isLoaded from './store/isLoaded';\nimport  * as loading from './store/loading';\nimport  * as post from './store/post';\n\nimport PostList from './PostList';\nimport getDataFromServer from './api/GetDataFromServer';\n\nconst Main = ({\n  posts, setPosts,\n  isLoaded, setIsLoaded,\n  loading, setIsLoading,\n  post, setPost,\n}) => {\n  const [textInput, setTextInput] = useState('');\n\n  const loadPosts = async() => {\n    setIsLoading(true);\n    const [allUsers, allComments, allPosts]\n    = await Promise.all([\n      getDataFromServer('https://jsonplaceholder.typicode.com/users'),\n      getDataFromServer('https://jsonplaceholder.typicode.com/comments'),\n      getDataFromServer('https://jsonplaceholder.typicode.com/posts'),\n    ]);\n\n    setIsLoading(true);\n    const unitedPost = allPosts.map(post => ({\n      ...post,\n      user: allUsers.find(user => user.id === post.userId),\n      comments: allComments.filter(commentId => commentId.postId === post.id),\n    }));\n\n    setPost(unitedPost);\n    setPosts(unitedPost);\n    setIsLoading(false);\n    setIsLoaded(true);\n  };\n\n  function debounce(f, delay) {\n    let timer;\n\n    return (...args) => {\n      clearTimeout(timer);\n      timer = setTimeout(() => f(...args), delay);\n    };\n  }\n\n  const inputText = debounce(setTextInput, 1000);\n\n  if (loading) {\n    return (\n      <p className=\"App\">...LOADING</p>\n    );\n  }\n\n  if (!isLoaded) {\n    return (\n      <section className=\"App\">\n        <button type=\"button\" onClick={loadPosts}>\n          Load\n        </button>\n      </section>\n    );\n  }\n\n  const filteredPost = post.filter((post) => {\n    const postContent = post.title + post.body;\n\n    return postContent.includes(textInput);\n  });\n\n  if (JSON.stringify(filteredPost) !== JSON.stringify(posts)) {\n    try {\n      setPosts(filteredPost);\n    } catch {\n      setPosts([]);\n    }\n  }\n\n  return (\n    <section className=\"App\">\n      <input\n        id=\"text\"\n        type=\"text\"\n        placeholder=\"Search...\"\n        onChange={event => inputText(event.target.value)}\n      />\n      <p>\n        {posts.length}\n        {' '}\n        posts found\n      </p>\n      <PostList posts={posts} />\n    </section>\n  );\n};\n\nconst getStateFromStore = state => ({\n  posts: state.posts,\n  isLoaded: state.isLoaded,\n  loading: state.loading,\n  post: state.post,\n})\n\nconst setStateToStore = {\n  setPosts: posts.setPosts,\n  setIsLoaded: isLoaded.setIsLoaded,\n  setIsLoading: loading.setIsLoading,\n  setPost: post.setPost,\n};\n\nMain.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.any).isRequired,\n  setPosts: PropTypes.func.isRequired,\n  isLoaded: PropTypes.bool.isRequired,\n  setIsLoaded: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  setIsLoading: PropTypes.func.isRequired,\n}\n\nexport default connect(getStateFromStore, setStateToStore)(Main);\n","import React from 'react';\nimport './App.css';\nimport Main from './Main';\n\nconst App = () => <Main />;\n\nexport default App;\n","import { createStore, combineReducers } from 'redux';\nimport postsReducer from './posts';\nimport isLoadedReducer from './isLoaded';\nimport loadingReducer from './loading';\nimport postReducer from './post';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  isLoaded: isLoadedReducer,\n  loading: loadingReducer,\n  post: postReducer,\n});\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport index from './store/index';\n\nReactDOM.render(\n  <Provider store={ index }><App /></Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
